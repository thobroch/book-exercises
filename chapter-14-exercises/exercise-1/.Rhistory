# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- paste0("/users/", thobroch, "/repos")
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- paste0("/users/", "programming-for-data-science", "/repos")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
get <- paste0(base_uri, org_resource)
get
# Extract the content of the response using the `content()` function, saving it
# in a variable.
API_content <- content(get)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET("https://api.github.com/users/programming-for-data-science/repos")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
API_content <- content(GET("https://api.github.com/users/programming-for-data-science/repos"))
API_content
# Convert the content variable from a JSON string into a data frame.
data_frame <- fromJSON(API_content)
# Convert the content variable from a JSON string into a data frame.
data_frame <- data.frame(API_content)
# How many (public) repositories does the organization have?
/users/:user/repos
# How many (public) repositories does the organization have?
https://api.github.com/users/:thobroch/repos
# How many (public) repositories does the organization have?
GET(https://api.github.com/users/:thobroch/repos)
# How many (public) repositories does the organization have?
GET(https://api.github.com/users/thobroch/repos)
# How many (public) repositories does the organization have?
GET("https://api.github.com/users/programming-for-data-science/:users/repos")
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "https://api.github.com/users/programming-for-data-science/"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "thobroch/repos"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET("https://api.github.com/users/programming-for-data-science/thobroch/repos")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
New_content <- content(GET("https://api.github.com/users/programming-for-data-science/thobroch/repos"))
data.frame(New_content)
