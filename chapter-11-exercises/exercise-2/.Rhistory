# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library("dplyr", lib.loc="~/R/win-library/3.5")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
car_makes <- select(vehicles, make)
car_makes
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(car_makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(car_makes)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
year_vehicles <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(year_vehicles, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(year_vehicles, (hwy + cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(year_vehicles, average = (hwy + cty) / 2)
# Filter the data set for vehicles manufactured in 1997
1997_vehicles <- filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(vehicles_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_cars <- filter(vehicles, drive == "2-Wheel Drive", hwy > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_cars <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_cars, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(two_wheel_cars, hwy == min(hwy), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(two_wheel_cars, hwy == min(hwy), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(two_wheel_cars, hwy == min(hwy)) , id)
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice)
select(year_and_make, hwy == max(hwy))
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
select(filter(vehicles, year == year_choice, make == make_choice) , hwy == max(hwy))
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
select(filter(vehicles, year == year_choice, make == make_choice) , hwy)
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
select(filter(vehicles, year == year_choice, make == make_choice) , hwy = max(hwy))
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice))
select(year_and_make, id, hwy = max(hwy))
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice)
select(year_and_make, id, hwy = max(hwy))
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice)
year_and_make[year_and_make$hwy == max(year_and_make$hwy) , "model"]
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
