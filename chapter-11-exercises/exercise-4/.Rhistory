library("dplyr", lib.loc="~/R/win-library/3.5")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library("dplyr", lib.loc="~/R/win-library/3.5")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, amount_of_delay = arr_time - sched_arr_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, amount_of_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(desc(amount_of_delay))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, desc(amount_of_delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, amount_of_delay = arr_time - sched_arr_time)
flights[, amount_of_delay]
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
new_flights <- mutate(flights, amount_of_delay = (arr_time - sched_arr_time))
new_flightsflights[, amount_of_delay]
new_flights[, amount_of_delay]
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(new_flights, desc(amount_of_delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
new_flights <- mutate(flights, amount_of_delay = (arr_time - sched_arr_time))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(new_flights, desc(amount_of_delay))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
mutate(flights, amount_of_delay = (arr_time - sched_arr_time)) %>% arrange(flights, desc(amount_of_delay))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
newer_flights <- mutate(flights, amount_of_delay = arr_time - sched_arr_time) %>% arrange(newer_flights, desc(amount_of_delay))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
newer_flights <- mutate(flights, amount_of_delay = arr_time - sched_arr_time) %>% arrange(flights, desc(amount_of_delay))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
newer_flights <- flights %>% mutate(flights, amount_of_delay = (arr_time - sched_arr_time)) %>% arrange(flights, desc(amount_of_delay))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
newer_flights <- flights %>% mutate(amount_of_delay = (arr_time - sched_arr_time)) %>% arrange(desc(amount_of_delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(newer_flights, amount_of_delay > 0)
# Make a histogram of the amount of time gained using the `hist()` function
hist(newer_flights$amount_of_delay > 0)
# Make a histogram of the amount of time gained using the `hist()` function
hist(new_flights$amount_of_delay)
# Make a histogram of the amount of time gained using the `hist()` function
histogram <- hist(new_flights$amount_of_delay == new_flights$amount_of_delay > 0)
# Make a histogram of the amount of time gained using the `hist()` function
histogram <- hist(new_flights$amount_of_delay)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seattle_flights <- data.frame(new_flights, c(origin, destination, amount_of_delay))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seattle_flights <- filter(new_flights, origin == "SEA")
# On average, did flights to SeaTac gain or loose time?
mean(seattle_flights$amount_of_delay)
# On average, did flights to SeaTac gain or loose time?
hist(seattle_flights$amount_of_delay)
# On average, did flights to SeaTac gain or loose time?
hist(seattle_flights$amount_of_delay, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seattle_flights <- filter(new_flights, origin == "SEA")
seattle_flights
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seattle_flights <- data.frame(filter(new_flights, origin == "SEA"))
seattle_flights
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seattle_flights <- data.frame(filter(new_flights, origin == "SEA", amount_of_delay > 0))
seattle_flights
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_SEA1 <- mean(flights$air_time)
filter(JFK_SEA1, origin = "JFK" & dest = "SEA")
filter(JFK_SEA1, origin = "JFK", dest = "SEA")
JFK_SEA1 %>% filter(origin = "JFK") %>% filter(dest = "SEA")
JFK_SEA1 %>% filter(origin == "JFK") %>% filter(dest == "SEA")
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
flights %>% filter(origin == "JFK") %>% filter(dest == "SEA") %>% mean(air_time)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
flights %>% filter(origin == "JFK") %>% filter(dest == "SEA") %>% mean(air_time, na.rm = TRUE)
