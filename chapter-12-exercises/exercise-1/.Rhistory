print("Hello World")
2+0+1
print("Hello World")
print("YO")
2+0+1
print("Hello World")
print("YO")
print("4 score and 7 years ago")
my_var <- 201
print(my_var)
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Findlay, OH"
# Assign your name to the variable `my_name`
my_name <- "Thomas"
# Assign your height (in inches) to a variable `my_height`
my_height <- "69 in."
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 100
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 10
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1
install.packages("stringr")
library("stringr")
word(lyric_e, 2, 4)
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.5")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- vehicles_two_wheel[vehicles_two_wheel$hwy == min(vehicles_two_wheel$hwy), ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheel <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$hwy > 20 , ]
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheel <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$hwy > 20 , ]
vehicles_two_wheel
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- vehicles_two_wheel[vehicles_two_wheel$hwy == min(vehicles_two_wheel$hwy), ]
worst_mpg$id
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
car_year_make <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice , ]
car_year_make[car_year_make$hwy == max(car_year_make$hwy) , "model"]
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
#install.packages("tidyr")
#install.packages("ggplot2")
library(dplyr)
library(ggplot2)
library(tidyr)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Alfred/book-exercises/chapter-12-exercises/exercise-1")
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv", stringsAsFactors = FALSE)
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
mutate(avocados, Date = as.Date(Date))
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
`colnames<-`(avocados, c("Date", "AveragePrice", "Total.Volume", "X4046" = "small_haas", "X4225" = "large_haas", "X4225" = "xlarge_haas" ))
# To perform analysis by avocado size, create a dataframe `by_size` that has
# only `Date`, `other_avos`, `small_haas`, `large_haas`, `xlarge_haas`
by_size <- avocados[c("Date", "other_avos", "small_haas", "large_haas", "xlarge_haas") , ]
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
size_gathered <- gather(by_size)
size_gathered
# We can also investigate sales by avocado type (conventional, organic).
# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- group_by(avocados, Date, type)
summarize(by_type, sum_Total = sum(Total.Volume))
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
by_type_wide <- spread(by_type)
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
by_type_wide <- spread(by_type, type)
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
by_type_wide <- spread(by_type, )
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
by_type_wide <- spread(by_type, type)
